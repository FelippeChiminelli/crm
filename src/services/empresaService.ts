import { supabase } from './supabaseClient'
import type { Empresa } from '../types'

// Valida√ß√£o de dados de empresa
function validateEmpresaData(data: Partial<Empresa>): void {
  console.log('üîç validateEmpresaData: Validando dados:', data)
  
  if (data.nome !== undefined) {
    if (!data.nome?.trim()) {
      throw new Error('Nome da empresa √© obrigat√≥rio')
    }
    
    if (data.nome.length < 2) {
      throw new Error('Nome da empresa deve ter pelo menos 2 caracteres')
    }
    
    if (data.nome.length > 100) {
      throw new Error('Nome da empresa n√£o pode ter mais de 100 caracteres')
    }
  }
  
  if (data.cnpj && data.cnpj.trim()) {
    // Remover pontua√ß√£o para validar apenas n√∫meros
    const cnpjNumbers = data.cnpj.replace(/[^\d]/g, '')
    console.log('üîç validateEmpresaData: CNPJ original:', data.cnpj)
    console.log('üîç validateEmpresaData: CNPJ n√∫meros:', cnpjNumbers)
    
    // Validar se tem 14 d√≠gitos
    if (cnpjNumbers.length !== 14) {
      throw new Error('CNPJ deve ter 14 d√≠gitos')
    }
    
    // Aceitar tanto formato com pontua√ß√£o quanto sem
    const cnpjRegex = /^(\d{2}\.?\d{3}\.?\d{3}\/?\d{4}-?\d{2}|\d{14})$/
    if (!cnpjRegex.test(data.cnpj)) {
      throw new Error('CNPJ deve estar no formato XX.XXX.XXX/XXXX-XX ou apenas n√∫meros')
    }
  }
  
  if (data.email && data.email.trim()) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(data.email)) {
      throw new Error('Email da empresa inv√°lido')
    }
  }
  
  if (data.telefone && data.telefone.trim()) {
    const phoneRegex = /^(\+55\s?)?(\(?\d{2}\)?[\s\-]?)?\d{4,5}[\s\-]?\d{4}$/
    if (!phoneRegex.test(data.telefone)) {
      throw new Error('Telefone da empresa inv√°lido')
    }
  }
  
  if (data.plano && !['basico', 'premium', 'enterprise'].includes(data.plano)) {
    throw new Error('Plano deve ser: basico, premium ou enterprise')
  }
  
  if (data.max_usuarios && (data.max_usuarios < 1 || data.max_usuarios > 1000)) {
    throw new Error('M√°ximo de usu√°rios deve estar entre 1 e 1000')
  }
}

// Dados para criar nova empresa
export interface CreateEmpresaData {
  nome: string
  cnpj: string
  email?: string
  telefone?: string
  endereco?: string
  plano?: 'basico' | 'premium' | 'enterprise'
  max_usuarios?: number
}

// Dados para atualizar empresa
export interface UpdateEmpresaData {
  nome?: string
  cnpj?: string
  email?: string
  telefone?: string
  endereco?: string
  plano?: 'basico' | 'premium' | 'enterprise'
  max_usuarios?: number
  ativo?: boolean
}

// Criar nova empresa
export async function createEmpresa(data: CreateEmpresaData): Promise<Empresa> {
  try {
    console.log('üè¢ createEmpresa: Iniciando cria√ß√£o da empresa...')
    console.log('üìä createEmpresa: Dados recebidos:', data)
    
    console.log('üîç createEmpresa: Validando dados...')
    validateEmpresaData(data)
    console.log('‚úÖ createEmpresa: Valida√ß√£o passou')
    
    // Verificar se CNPJ foi fornecido (agora obrigat√≥rio)
    if (!data.cnpj?.trim()) {
      console.error('‚ùå createEmpresa: CNPJ n√£o fornecido')
      throw new Error('CNPJ √© obrigat√≥rio')
    }
    
    console.log('üîç createEmpresa: Verificando CNPJ duplicado...', data.cnpj.trim())
    
    // Verificar CNPJ duplicado
    const { data: existingEmpresa, error: checkError } = await supabase
      .from('empresas')
      .select('id')
      .eq('cnpj', data.cnpj.trim())
      .single()
    
    console.log('üìã createEmpresa: Resultado da verifica√ß√£o CNPJ:', { existingEmpresa, checkError })
    
    if (checkError && checkError.code !== 'PGRST116') {
      console.error('‚ùå createEmpresa: Erro ao verificar CNPJ:', checkError)
      throw new Error(`Erro ao verificar CNPJ: ${checkError.message}`)
    }
    
    if (existingEmpresa) {
      console.error('‚ùå createEmpresa: CNPJ j√° existe:', existingEmpresa.id)
      throw new Error('CNPJ j√° cadastrado')
    }
    
    console.log('‚úÖ createEmpresa: CNPJ dispon√≠vel')
    
    const empresaData = {
      nome: data.nome.trim(),
      cnpj: data.cnpj.trim(),
      email: data.email?.trim() || null,
      telefone: data.telefone?.trim() || null,
      endereco: data.endereco?.trim() || null,
      plano: data.plano || 'basico',
      max_usuarios: data.max_usuarios || 5,
      ativo: true
    }
    
    console.log('üìù createEmpresa: Inserindo dados na tabela empresas...', empresaData)
    
    const { data: newEmpresa, error } = await supabase
      .from('empresas')
      .insert([empresaData])
      .select()
      .single()
    
    console.log('üìã createEmpresa: Resultado da inser√ß√£o:', { newEmpresa, error })
    
    if (error) {
      console.error('‚ùå createEmpresa: Erro ao inserir na tabela:', error)
      throw new Error(`Erro ao criar empresa: ${error.message}`)
    }
    
    if (!newEmpresa) {
      console.error('‚ùå createEmpresa: Empresa n√£o retornada ap√≥s inser√ß√£o')
      throw new Error('Empresa criada mas n√£o retornada')
    }
    
    console.log('‚úÖ createEmpresa: Empresa criada com sucesso:', newEmpresa.id)
    return newEmpresa
  } catch (error) {
    console.error('‚ùå createEmpresa: Erro geral:', error)
    throw error
  }
}

// Obter empresa atual do usu√°rio
export async function getCurrentEmpresa(): Promise<Empresa | null> {
  try {
    console.log('üîç getCurrentEmpresa: Obtendo empresa do usu√°rio...')
    
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      throw new Error('Usu√°rio n√£o autenticado')
    }
    
    // Buscar empresa atrav√©s do perfil do usu√°rio
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('empresa_id')
      .eq('uuid', user.id)
      .single()
    
    if (profileError || !profile?.empresa_id) {
      console.warn('‚ö†Ô∏è getCurrentEmpresa: Perfil sem empresa_id')
      return null
    }
    
    const { data: empresa, error: empresaError } = await supabase
      .from('empresas')
      .select('*')
      .eq('id', profile.empresa_id)
      .single()
    
    if (empresaError) {
      console.error('‚ùå getCurrentEmpresa: Erro ao buscar empresa:', empresaError)
      return null
    }
    
    console.log('‚úÖ getCurrentEmpresa: Empresa encontrada:', empresa.nome)
    return empresa
  } catch (error) {
    console.error('‚ùå getCurrentEmpresa: Erro geral:', error)
    return null
  }
}

// Atualizar dados da empresa
export async function updateEmpresa(empresaId: string, data: UpdateEmpresaData): Promise<Empresa> {
  try {
    console.log('üîÑ updateEmpresa: Atualizando empresa...', empresaId)
    
    validateEmpresaData(data)
    
    // Verificar se usu√°rio pode atualizar esta empresa
    const currentEmpresa = await getCurrentEmpresa()
    if (!currentEmpresa || currentEmpresa.id !== empresaId) {
      throw new Error('Voc√™ n√£o tem permiss√£o para atualizar esta empresa')
    }
    
    // Verificar CNPJ duplicado (se alterado)
    if (data.cnpj?.trim() && data.cnpj !== currentEmpresa.cnpj) {
      const { data: existingEmpresa } = await supabase
        .from('empresas')
        .select('id')
        .eq('cnpj', data.cnpj.trim())
        .neq('id', empresaId)
        .single()
      
      if (existingEmpresa) {
        throw new Error('CNPJ j√° cadastrado por outra empresa')
      }
    }
    
    const updateData = {
      ...(data.nome && { nome: data.nome.trim() }),
      ...(data.cnpj !== undefined && { cnpj: data.cnpj?.trim() || null }),
      ...(data.email !== undefined && { email: data.email?.trim() || null }),
      ...(data.telefone !== undefined && { telefone: data.telefone?.trim() || null }),
      ...(data.endereco !== undefined && { endereco: data.endereco?.trim() || null }),
      ...(data.plano && { plano: data.plano }),
      ...(data.max_usuarios && { max_usuarios: data.max_usuarios }),
      ...(data.ativo !== undefined && { ativo: data.ativo })
    }
    
    const { data: updatedEmpresa, error } = await supabase
      .from('empresas')
      .update(updateData)
      .eq('id', empresaId)
      .select()
      .single()
    
    if (error) {
      console.error('‚ùå updateEmpresa: Erro ao atualizar empresa:', error)
      throw new Error(`Erro ao atualizar empresa: ${error.message}`)
    }
    
    console.log('‚úÖ updateEmpresa: Empresa atualizada com sucesso')
    return updatedEmpresa
  } catch (error) {
    console.error('‚ùå updateEmpresa: Erro geral:', error)
    throw error
  }
}

// Listar usu√°rios da empresa
export async function getEmpresaUsers(): Promise<any[]> {
  try {
    console.log('üë• getEmpresaUsers: Listando usu√°rios da empresa...')
    
    const currentEmpresa = await getCurrentEmpresa()
    if (!currentEmpresa) {
      throw new Error('Empresa n√£o encontrada')
    }



    const { data: users, error } = await supabase
      .from('profiles')
      .select('uuid, full_name, email, phone, created_at, is_admin')
      .eq('empresa_id', currentEmpresa.id)
      .order('created_at', { ascending: false })

    if (error) {
      console.error('‚ùå getEmpresaUsers: Erro ao buscar usu√°rios:', error)
      throw new Error(`Erro ao buscar usu√°rios: ${error.message}`)
    }

    console.log('‚úÖ getEmpresaUsers: Usu√°rios encontrados:', users?.length || 0)
    return users || []
  } catch (error) {
    console.error('‚ùå getEmpresaUsers: Erro geral:', error)
    throw error
  }
}

// Verificar se empresa pode adicionar mais usu√°rios
export async function canAddMoreUsers(): Promise<boolean> {
  try {
    const currentEmpresa = await getCurrentEmpresa()
    if (!currentEmpresa) return false
    
    const users = await getEmpresaUsers()
    return users.length < currentEmpresa.max_usuarios
  } catch (error) {
    console.error('‚ùå canAddMoreUsers: Erro:', error)
    return false
  }
}

// Estat√≠sticas da empresa
export async function getEmpresaStats() {
  try {
    console.log('üìä getEmpresaStats: Obtendo estat√≠sticas da empresa...')
    
    const currentEmpresa = await getCurrentEmpresa()
    if (!currentEmpresa) {
      throw new Error('Empresa n√£o encontrada')
    }
    
    // Contar usu√°rios, leads, pipelines
    const [usersResult, leadsResult, pipelinesResult] = await Promise.all([
      supabase
        .from('profiles')
        .select('uuid', { count: 'exact', head: true })
        .eq('empresa_id', currentEmpresa.id),
      
      supabase
        .from('leads')
        .select('id', { count: 'exact', head: true })
        .eq('empresa_id', currentEmpresa.id),
      
      supabase
        .from('pipelines')
        .select('id', { count: 'exact', head: true })
        .eq('empresa_id', currentEmpresa.id)
        .eq('active', true)
    ])
    
    const stats = {
      usuarios: usersResult.count || 0,
      leads: leadsResult.count || 0,
      pipelines: pipelinesResult.count || 0,
      maxUsuarios: currentEmpresa.max_usuarios,
      plano: currentEmpresa.plano,
      ativo: currentEmpresa.ativo
    }
    
    console.log('‚úÖ getEmpresaStats: Estat√≠sticas obtidas:', stats)
    return stats
  } catch (error) {
    console.error('‚ùå getEmpresaStats: Erro geral:', error)
    throw error
  }
}

// Verificar se usu√°rio √© admin da empresa (primeiro usu√°rio cadastrado)
export async function isEmpresaAdmin(): Promise<boolean> {
  try {
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) return false
    
    // Buscar o perfil do usu√°rio para verificar is_admin
    const { data: profile } = await supabase
      .from('profiles')
      .select('is_admin, empresa_id')
      .eq('uuid', user.id)
      .single()
    
    if (!profile) {
      console.log('‚ö†Ô∏è isEmpresaAdmin: Perfil n√£o encontrado')
      return false
    }

    const isAdmin = profile.is_admin || false
    console.log('üîç isEmpresaAdmin: Verificando admin status:', { userId: user.id, isAdmin })
    
    return isAdmin
  } catch (error) {
    console.error('‚ùå isEmpresaAdmin: Erro:', error)
    return false
  }
}

// Interface para dados de cria√ß√£o de usu√°rio
export interface CreateUserData {
  fullName: string
  email: string
  phone: string
  birthDate: string
  gender: 'masculino' | 'feminino' | 'outro'
  password: string
}


// Criar novo usu√°rio para a empresa (apenas admins)
export async function createUserForEmpresa(userData: CreateUserData & { role?: 'ADMIN' | 'VENDEDOR' }): Promise<any> {
  try {
    console.log('üë§ createUserForEmpresa: Criando novo usu√°rio...', userData.email)
    console.log('üë§ createUserForEmpresa: Role definido como:', userData.role || 'VENDEDOR (padr√£o)')
    
    // Verificar se usu√°rio atual √© admin
    const isAdmin = await isEmpresaAdmin()
    if (!isAdmin) {
      throw new Error('Apenas administradores podem adicionar novos usu√°rios')
    }
    
    // Verificar se empresa pode adicionar mais usu√°rios
    const canAdd = await canAddMoreUsers()
    if (!canAdd) {
      throw new Error('Limite de usu√°rios atingido. Fa√ßa upgrade do seu plano')
    }
    
    const currentEmpresa = await getCurrentEmpresa()
    if (!currentEmpresa) {
      throw new Error('Empresa n√£o encontrada')
    }
    
    // Validar dados do usu√°rio
    if (!userData.fullName?.trim()) {
      throw new Error('Nome completo √© obrigat√≥rio')
    }
    
    if (!userData.email?.trim()) {
      throw new Error('E-mail √© obrigat√≥rio')
    }
    
    if (!userData.phone?.trim()) {
      throw new Error('Telefone √© obrigat√≥rio')
    }
    
    if (!userData.password || userData.password.length < 6) {
      throw new Error('Senha deve ter pelo menos 6 caracteres')
    }
    
    // Verificar se e-mail j√° existe na tabela auth.users
    const { data: existingAuthUser } = await supabase
      .from('profiles')
      .select('email')
      .eq('email', userData.email.trim())
      .single()
    
    if (existingAuthUser) {
      throw new Error('E-mail j√° cadastrado no sistema')
    }
    
    // Preparar dados de role ANTES de criar o usu√°rio (como admin)
    const isAdminRoleRequested = userData.role === 'ADMIN'
    let requestedRoleId: string | null = null
    try {
      if (userData.role) {
        const roleName = isAdminRoleRequested ? 'Admin' : 'Vendedor'
        const { data: roleData } = await supabase
          .from('roles')
          .select('id')
          .eq('name', roleName)
          .eq('empresa_id', currentEmpresa.id)
          .eq('is_active', true)
          .single()
        if (roleData) {
          requestedRoleId = roleData.id
          console.log(`‚úÖ Role ID (pr√©-c√°lculo) para ${roleName}:`, requestedRoleId)
        } else {
          console.warn(`‚ö†Ô∏è Role ${roleName} n√£o encontrado para empresa ${currentEmpresa.id}`)
        }
      }
    } catch (roleLookupError) {
      console.warn('‚ö†Ô∏è Erro ao buscar role antes da cria√ß√£o:', roleLookupError)
    }

    // Tentar usar a fun√ß√£o RPC se dispon√≠vel
    try {
      const { data: result, error: rpcError } = await supabase.rpc('create_empresa_user', {
        user_email: userData.email.trim(),
        user_password: userData.password,
        user_full_name: userData.fullName.trim(),
        user_phone: userData.phone.trim(),
        user_birth_date: userData.birthDate,
        user_gender: userData.gender,
        user_is_admin: isAdminRoleRequested
      })
      
      if (rpcError) {
        console.log('‚ö†Ô∏è createUserForEmpresa: RPC n√£o dispon√≠vel, usando m√©todo alternativo:', rpcError.message)
        throw new Error('RPC_NOT_AVAILABLE')
      }
      
      if (result && result.success) {
        console.log('‚úÖ createUserForEmpresa: Usu√°rio criado via RPC:', result.user_id)
        return result
      } else if (result && result.error) {
        throw new Error(result.error)
      }
    } catch (rpcError: any) {
      if (rpcError.message !== 'RPC_NOT_AVAILABLE') {
        throw rpcError
      }
      
      console.log('‚ö†Ô∏è createUserForEmpresa: Usando m√©todo alternativo de cria√ß√£o...')
    }
    
    // M√©todo alternativo: Usar signUp para criar o usu√°rio e perfil automaticamente
    console.log('‚ö†Ô∏è createUserForEmpresa: Usando m√©todo de signup tempor√°rio...')
    
    // Salvar dados da sess√£o atual do admin
    const { data: { session: adminSession } } = await supabase.auth.getSession()
    
    if (!adminSession) {
      throw new Error('Sess√£o do administrador n√£o encontrada')
    }
    
    try {
      // Criar usu√°rio usando signUp (isso vai criar automaticamente na tabela auth e profiles via trigger)
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: userData.email.trim(),
        password: userData.password,
        options: {
          data: {
            full_name: userData.fullName.trim(),
            phone: userData.phone.trim(),
            birth_date: userData.birthDate,
            gender: userData.gender,
            empresa_id: currentEmpresa.id
          }
        }
      })
      
      if (authError || !authData.user) {
        console.error('‚ùå createUserForEmpresa: Erro ao criar usu√°rio auth:', authError)
        throw new Error(`Erro ao criar usu√°rio: ${authError?.message || 'Erro desconhecido'}`)
      }
      
      console.log('‚úÖ createUserForEmpresa: Usu√°rio criado com ID:', authData.user.id)
      
      // Importante: Fazer login como o usu√°rio rec√©m-criado para atualizar o pr√≥prio perfil (passa no RLS)
      try {
        console.log('üîê Fazendo login tempor√°rio como o novo usu√°rio para atualizar perfil...')
        const { error: tempLoginError } = await supabase.auth.signInWithPassword({
          email: userData.email.trim(),
          password: userData.password
        })
        if (tempLoginError) {
          console.warn('‚ö†Ô∏è Login tempor√°rio falhou (pode j√° estar logado):', tempLoginError.message)
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è Falha ao garantir sess√£o do novo usu√°rio:', e)
      }

      // Atualizar perfil COMO O PR√ìPRIO USU√ÅRIO (RLS permite uuid = auth.uid())
      try {
        const { data: updatedProfile, error: updateError } = await supabase
          .from('profiles')
          .update({
            full_name: userData.fullName.trim(),
            phone: userData.phone.trim(),
            birth_date: userData.birthDate,
            gender: userData.gender,
            empresa_id: currentEmpresa.id,
            is_admin: isAdminRoleRequested,
            role_id: requestedRoleId
          })
          .eq('uuid', authData.user.id)
          .select()
          .single()

        if (updateError) {
          console.error('‚ùå Erro ao atualizar perfil (como usu√°rio):', updateError)
          throw new Error(`Erro ao atualizar perfil: ${updateError.message}`)
        }
        console.log('‚úÖ Perfil atualizado (como usu√°rio):', {
          uuid: updatedProfile.uuid,
          empresa_id: updatedProfile.empresa_id,
          role_id: updatedProfile.role_id,
          is_admin: updatedProfile.is_admin
        })
      } catch (e) {
        console.error('‚ùå Falha na atualiza√ß√£o do perfil como usu√°rio:', e)
        // N√£o rethrow aqui para tentar restaurar admin mesmo assim
      }

      // Restaurar sess√£o do admin
      try {
        const { error: restoreError } = await supabase.auth.setSession({
          access_token: adminSession.access_token,
          refresh_token: adminSession.refresh_token
        })
        if (restoreError) {
          console.warn('‚ö†Ô∏è Erro ao restaurar sess√£o do admin:', restoreError)
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è Exce√ß√£o ao restaurar sess√£o do admin:', e)
      }
      
      // Criar role padr√£o para o usu√°rio
      try {
        const { data: defaultRole } = await supabase
          .from('roles')
          .select('id')
          .eq('name', 'User')
          .eq('empresa_id', currentEmpresa.id)
          .single()
        
        if (defaultRole) {
          await supabase
            .from('user_roles')
            .insert([{
              user_id: authData.user.id,
              role_id: defaultRole.id
            }])
          
          console.log('‚úÖ Role padr√£o atribu√≠do ao usu√°rio')
        }
      } catch (roleError) {
        console.warn('‚ö†Ô∏è N√£o foi poss√≠vel atribuir role padr√£o:', roleError)
      }
      
      return {
        success: true,
        user: {
          id: authData.user.id,
          email: authData.user.email
        },
        profile: {
          uuid: authData.user.id,
          full_name: userData.fullName.trim(),
          email: userData.email.trim(),
          empresa_id: currentEmpresa.id,
          is_admin: isAdminRoleRequested,
          role_id: requestedRoleId
        },
        message: `Usu√°rio ${userData.fullName} criado com sucesso! Credenciais: ${userData.email} / ${userData.password}`
      }
    } catch (signupError) {
      // Restaurar sess√£o do admin em caso de erro
      try {
        await supabase.auth.setSession({
          access_token: adminSession.access_token,
          refresh_token: adminSession.refresh_token
        })
      } catch (restoreError) {
        console.error('‚ùå Erro cr√≠tico ao restaurar sess√£o:', restoreError)
      }
      
      throw signupError
    }
  } catch (error) {
    console.error('‚ùå createUserForEmpresa: Erro geral:', error)
    throw error
  }
}

// ===========================================
// FUN√á√ÉO PARA ATUALIZAR ROLE DO USU√ÅRIO
// ===========================================

export async function updateUserRole(userId: string, isAdmin: boolean): Promise<void> {
  try {
    console.log('üîß Atualizando role do usu√°rio:', userId, 'isAdmin:', isAdmin)
    
    // Verificar se o usu√°rio atual √© admin
    const { data: { user: currentUser }, error: userError } = await supabase.auth.getUser()
    if (userError || !currentUser) {
      throw new Error('Usu√°rio n√£o autenticado')
    }

    // Verificar se o usu√°rio atual √© admin
    const { data: currentProfile, error: profileError } = await supabase
      .from('profiles')
      .select('is_admin, empresa_id')
      .eq('uuid', currentUser.id)
      .single()

    if (profileError || !currentProfile?.is_admin) {
      throw new Error('Apenas administradores podem alterar roles de usu√°rios')
    }

    // Verificar se o usu√°rio a ser alterado pertence √† mesma empresa
    const { data: targetProfile, error: targetError } = await supabase
      .from('profiles')
      .select('empresa_id')
      .eq('uuid', userId)
      .single()

    if (targetError) {
      throw new Error('Usu√°rio n√£o encontrado')
    }

    if (targetProfile.empresa_id !== currentProfile.empresa_id) {
      throw new Error('Voc√™ n√£o pode alterar usu√°rios de outras empresas')
    }

    // Atualizar o campo is_admin no perfil
    const { error: updateError } = await supabase
      .from('profiles')
      .update({ is_admin: isAdmin })
      .eq('uuid', userId)

    if (updateError) {
      console.error('‚ùå Erro ao atualizar role:', updateError)
      throw new Error('Erro ao atualizar role do usu√°rio')
    }

    console.log('‚úÖ Role do usu√°rio atualizada com sucesso')
  } catch (error) {
    console.error('‚ùå updateUserRole: Erro:', error)
    throw error
  }
} 