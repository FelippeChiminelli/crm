import { supabase } from '../services/supabaseClient'

/**
 * Verifica se o usu√°rio est√° autenticado e retorna informa√ß√µes da sess√£o
 */
export async function verifyAuthentication() {
  try {
    const { data: { session }, error } = await supabase.auth.getSession()
    
    if (error) {
      console.error('‚ùå Erro ao verificar sess√£o:', error)
      return { authenticated: false, user: null, error }
    }
    
    if (!session?.user) {
      console.log('‚ùå Nenhuma sess√£o ativa encontrada')
      return { authenticated: false, user: null, error: new Error('Sess√£o n√£o encontrada') }
    }
    
    console.log('‚úÖ Usu√°rio autenticado:', session.user.id)
    return { authenticated: true, user: session.user, error: null }
  } catch (err) {
    console.error('‚ùå Erro ao verificar autentica√ß√£o:', err)
    return { authenticated: false, user: null, error: err }
  }
}

/**
 * For√ßa o refresh do token de autentica√ß√£o
 */
export async function refreshAuthToken() {
  try {
    console.log('üîÑ Tentando refresh do token...')
    const { data, error } = await supabase.auth.refreshSession()
    
    if (error) {
      console.error('‚ùå Erro ao fazer refresh do token:', error)
      return { success: false, error }
    }
    
    console.log('‚úÖ Token refreshed com sucesso')
    return { success: true, session: data.session }
  } catch (err) {
    console.error('‚ùå Erro inesperado no refresh:', err)
    return { success: false, error: err }
  }
}

/**
 * Verifica se o usu√°rio tem permiss√£o para modificar um lead
 * CORRIGIDO: Permite modifica√ß√£o quando responsible_uuid for null ou quando for o pr√≥prio usu√°rio
 */
export function canUserModifyLead(user: any, lead: any): boolean {
  if (!user || !lead) return false
  
  // Se o lead n√£o tem respons√°vel definido, qualquer usu√°rio autenticado pode modificar
  if (!lead.responsible_uuid) {
    console.log(`üîì Lead sem respons√°vel definido - permitindo modifica√ß√£o para usu√°rio: ${user.id}`)
    return true
  }
  
  // Se o usu√°rio √© o respons√°vel pelo lead, pode modificar
  const canModify = user.id === lead.responsible_uuid
  console.log(`üîí Verifica√ß√£o de permiss√£o:`, { 
    userId: user.id, 
    leadResponsible: lead.responsible_uuid, 
    canModify 
  })
  
  return canModify
} 