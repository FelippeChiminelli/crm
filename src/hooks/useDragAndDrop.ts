import { useState } from 'react'
import type { DragStartEvent, DragEndEvent } from '@dnd-kit/core'
import { useToastContext } from '../contexts/ToastContext'
import { updateLeadStage } from '../services/leadService'
import { supabase } from '../services/supabaseClient'
import type { Lead } from '../types'

interface UseDragAndDropProps {
  leadsByStage: { [key: string]: Lead[] }
  setLeadsByStage: React.Dispatch<React.SetStateAction<{ [key: string]: Lead[] }>>
}

// Fun√ß√£o para verificar autentica√ß√£o
async function verifyAuthentication() {
  const { data: { user } } = await supabase.auth.getUser()
  return {
    authenticated: !!user,
    user
  }
}

// Permitir que usu√°rios autenticados (inclui vendedores) movam leads entre etapas.
// A autoriza√ß√£o fina deve ser garantida pelo backend (RLS) em updateLeadStage.
function canUserModifyLead(_user: any, _lead: Lead) {
  return true
}

// Fun√ß√£o para refresh do token
async function refreshAuthToken() {
  try {
    const { data, error } = await supabase.auth.refreshSession()
    return {
      success: !error,
      data,
      error
    }
  } catch (error) {
    return {
      success: false,
      error
    }
  }
}

export function useDragAndDrop({ leadsByStage, setLeadsByStage }: UseDragAndDropProps) {
  const [activeId, setActiveId] = useState<string | null>(null)
  const { showError, showInfo } = useToastContext()

  const handleDragStart = (event: DragStartEvent) => {
    const leadId = event.active.id as string
    console.log('üöÄ handleDragStart chamado para lead:', leadId)
    setActiveId(leadId)
  }

  const handleDragOver = () => {
    // L√≥gica para drag over se necess√°rio
  }

  const handleDragEnd = async (event: DragEndEvent) => {
    const { active, over } = event
    
    console.log('üéØ handleDragEnd chamado:', { activeId: active.id, overId: over?.id })
    
    if (!over) {
      console.log('üìç N√£o h√° √°rea de drop v√°lida')
      setActiveId(null) // Limpar apenas se n√£o h√° √°rea v√°lida
      return
    }
    
    const leadId = active.id as string
    
    // CORRIGIDO: over.id pode ser stage.id OU lead.id
    // Se over.id √© um lead, encontrar a stage desse lead
    let newStageId = over.id as string
    
    // Verificar se over.id √© um lead ID (n√£o stage ID)
    const isOverIdALead = Object.values(leadsByStage).some(stageLeads => 
      stageLeads.some(lead => lead.id === newStageId)
    )
    
    if (isOverIdALead) {
      // over.id √© um lead, encontrar a stage desse lead
      const foundStageId = Object.keys(leadsByStage).find(stageId => 
        leadsByStage[stageId].some(lead => lead.id === newStageId)
      )
      if (foundStageId) {
        newStageId = foundStageId
        console.log(`üîÑ over.id era um lead (${over.id}), convertido para stage: ${newStageId}`)
      }
    }
    
    console.log(`üìç Target final: ${newStageId} (${isOverIdALead ? 'era lead' : 'era stage'})`)
    
    // Encontrar etapa atual do lead
    const currentStageId = Object.keys(leadsByStage).find(stageId => 
      leadsByStage[stageId].some(lead => lead.id === leadId)
    )
    
    if (!currentStageId) {
      console.error('‚ùå Etapa atual do lead n√£o encontrada')
      setActiveId(null) // Limpar apenas em caso de erro
      return
    }
    
    console.log(`üìç Lead est√° em: ${currentStageId}, target detectado: ${newStageId}`)
    
    // Se o lead foi solto na mesma etapa, limpar activeId e retornar
    if (currentStageId === newStageId) {
      console.log('üìå Lead solto na mesma etapa, nenhuma altera√ß√£o necess√°ria')
      setActiveId(null) // CORRIGIDO: Limpar activeId aqui para mesma etapa
      return
    }
    
    // CORRIGIDO: S√≥ limpar activeId quando realmente vai processar o movimento
    setActiveId(null)
    
    console.log(`üîÑ Movendo lead ${leadId} de ${currentStageId} para ${newStageId}`)
    
    // Fazer atualiza√ß√£o otimista primeiro
    const leadToMove = leadsByStage[currentStageId].find(lead => lead.id === leadId)
    
    if (!leadToMove) {
      console.error('‚ùå Lead a ser movido n√£o encontrado')
      return
    }
    
    // Atualizar estado local imediatamente (otimistic update)
    setLeadsByStage(prev => {
      const newState = {
        ...prev,
        [currentStageId]: prev[currentStageId].filter(lead => lead.id !== leadId),
        [newStageId]: [...(prev[newStageId] || []), { ...leadToMove, stage_id: newStageId }]
      }
      console.log('‚úÖ Estado local atualizado otimisticamente')
      return newState
    })
    
    try {
      // Verifica√ß√£o robusta de autentica√ß√£o
      const authCheck = await verifyAuthentication()
      if (!authCheck.authenticated || !authCheck.user) {
        throw new Error('Usu√°rio n√£o autenticado. Fa√ßa login novamente.')
      }
      
      // Verificar permiss√£o usando helper
      if (!canUserModifyLead(authCheck.user, leadToMove)) {
        throw new Error('Voc√™ n√£o tem permiss√£o para mover este lead.')
      }
      
      console.log(`üë§ Verifica√ß√£o completa - Usu√°rio: ${authCheck.user.id}, Lead: ${leadToMove.responsible_uuid}`)
      
      // Tentar atualizar no banco
      await updateLeadStage(leadId, newStageId)
      console.log('‚úÖ Lead atualizado no banco com sucesso')
    } catch (error) {
      console.error('‚ùå Erro ao mover lead no banco:', error)
      
      // Reverter estado local em caso de erro
      setLeadsByStage(prev => {
        const revertState = {
          ...prev,
          [newStageId]: prev[newStageId].filter(lead => lead.id !== leadId),
          [currentStageId]: [...(prev[currentStageId] || []), leadToMove]
        }
        console.log('üîÑ Estado local revertido devido a erro')
        return revertState
      })
      
      // Tratamento inteligente de erros
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido'
      console.error('üí• Erro detalhado:', error)
      
      if (errorMessage.includes('409') || errorMessage.includes('Conflict')) {
        // Tentar refresh do token e retry
        console.log('üîÑ Tentando refresh do token...')
        const refreshResult = await refreshAuthToken()
        
        if (refreshResult.success) {
          showInfo('Token atualizado', 'Tente mover o lead novamente.')
        } else {
          showError('Sess√£o expirada', 'Fa√ßa login novamente.')
          setTimeout(() => window.location.href = '/', 1000)
        }
      } else if (errorMessage.includes('n√£o autenticado')) {
        showError('Sess√£o expirada', 'Redirecionando para login...')
        setTimeout(() => window.location.href = '/', 1000)
      } else {
        showError('Erro ao mover lead', errorMessage)
      }
    }
  }

  return {
    activeId,
    handleDragStart,
    handleDragOver,
    handleDragEnd
  }
} 